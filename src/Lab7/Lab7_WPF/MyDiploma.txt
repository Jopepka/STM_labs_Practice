МИНИСТЕРСТВО ОБРАЗОВАНИЯ И НАУКИ РОССИЙСКОЙ ФЕДЕРАЦИИ
Федеральное государственное автономное образовательное учреждение высшего образования 
«Национальный исследовательский 
Нижегородский государственный университет им. Н.И. Лобачевского»
(ННГУ)


Институт информационных технологий, математики и механики

Кафедра информатики и автоматизации научных исследований

Направление подготовки: «Прикладная информатика»
Профиль подготовки: «Проектирование и автоматизация производства изделий микроэлектроники»



ВЫПУСКНАЯ КВАЛИФИКАЦИОННАЯ РАБОТА БАКАЛАВРА

на тему:
«Применение моделей глубокого обучения для задачи распознавания пересечения среди векторов»






Выполнил: студент группы 382007-ПИШ
_______________________ Вороненко А. Е.
Подпись

Научный руководитель:
Доцент, к.т.н.
_______________________ Штанюк А. А.
	Подпись












Нижний Новгород
2024
 
Содержание
Введение	3
1.	Задача распознавания пересечений	4
1.1.	Постановка задачи	4
1.2.	Актуальность	4
1.3.	Существующие алгоритмы	5
2.	Исходные данные	6
3.	Общие параметры моделей	8
4.	Распознавание пересечения между парами векторов	9
4.1.	Полносвязная нейронная сеть (FCNN)	9
4.2.	Сверточная нейронная сеть (CNN)	12
4.3.	Рекуррентная нейронная сеть (RNN)	14
4.4.	Сравнение моделей, распознающих пересечение пары векторов	17
5.	Распознавание пересечения в множестве 16 векторов	19
5.1.	Доработка FCNN	19
5.2.	Доработка CNN	23
5.3.	Доработка RNN	25
5.4.	Сравнение моделей распознающих множество векторов	27
Заключение	32
Выводы по FCNN	32
Выводы по RNN	32
Выводы по CNN	32
Рекомендации	32
Список литературы	34
Приложение 1. Реализация классов фигур	35
Приложение 2. Реализация класса FigureDataset	38
Приложение 3. Реализация класса определяющего пересечения	40
Приложение 4. Реализация моделей, распознающих пересечение между парой векторов.	42
Приложение 4.1. Реализация FCNN_2sect	42
Приложение 4.2. Реализация CNN_2sect	42
Приложение 4.3. Реализация RNN_2sect	43
Приложение 5. Реализация моделей, распознающих пересечение среди 16 векторов	44
Приложение 5.1. Реализация FCNN_16sect	44
Приложение 5.2. Реализация CNN_16sect	44
Приложение 5.3. Реализация RNN_16sect	45

Введение
Определение пересечения и наложения различных геометрических фигур имеет широкий спектр приложений, например, при проектировании и изготовлении микросхем иногда требуется проверить, нет ли пересечений в контактах, такие схемы могут включать большое количество объектов. Другой пример: моделирование физики объектов, а именно определение коллизий объектов. Сами объекты могут состоять из тысяч полигонов. Есть и другие области. Всех их объединяет то, что объектов в задачах может быть тысячи и миллионы. 
Сейчас для решения используют различные методы: пересечения граней, разделения осей, бинарной растеризации, аналитические и другие. Еще одним способом могут стать глубокие нейронные сети.
В этой работы мы рассмотрим задачу определения глубокой нейронной сетью наличие пересечения геометрических фигур на плоскости, плюсы и минусы моделей. Посмотрим на скорость работы и выдаваемую точность. Узнаем, можно ли применять такие модели на практике.
Бакалаврская выпускная работа состоит из введения, пяти глав, заключения, списка литературы и приложений. В первой главе рассмотрим актуальность и существующие алгоритмы. Во второй то, как будем генерировать данные. В третьей общие параметры моделей. В четвертой создадим модели, распознающие пересечение между парами векторов. В пятой усовершенствуем для распознавания пересечения между среди 16 векторов. В приложениях будут содержаться листинги выполняемого кода.
	Задача распознавания пересечений
	Постановка задачи
Задача бинарной классификации состоит в определении пересечения между двумерными векторами. В контексте дипломной работы задача разбивается на два этапа:
	Определение пересечения между парой векторов. На этом этапе входными данными являются два вектора А и B. Модель должна определить, пересекаются ли эти два вектора.
	Определение пересечения среди множества векторов. На этом этапе задача усложняется. Входные данные представляют собой набор из 16 векторов А={a_1,a_2,…,a_16}. Модель должна классифицировать, есть ли среди всех возможных пар векторов пересекающиеся.
В обоих случая модели должны выдавать два значения [y_0,y_1 ] где: 
	y_0 — вероятность отсутствия пересечения,
	y_1 — вероятность наличия пересечения.
	Актуальность
Задача определения пересечения между векторами имеет значимость в различных областях:
	Геометрическое моделирование и компьютерная графика: Проверка пересечений между векторами является базовой операцией в рендеринге сцен и при моделировании объектов. Точное определение пересечений необходимо для правильного отображения объектов, наложения текстур и расчёта теней.
	Робототехника и планирование траекторий: в задачах навигации и планирования пути для автономных систем важно быстро и точно определять пересечения между путями движущихся объектов и препятствий. Это помогает избегать столкновений и планировать безопасные маршруты.
	ГИС и картография: Анализ пересечений между линиями и границами является ключевым для пространственного анализа, например, при оценке взаимодействия инфраструктурных объектов или определении пересечений дорог.
	Системы безопасности и мониторинга: В видеонаблюдении и системах контроля вторжения, обнаружение пересечений помогает определить пересечение охраняемых периметров или движущихся объектов, что важно для предотвращения несанкционированного доступа.
	Медицинская визуализация: В биомедицинских приложениях, определение пересечений между анатомическими структурами может использоваться для диагностики или планирования хирургических вмешательств.
	Существующие алгоритмы
Для решения задачи пересечения векторов, представлены несколько подходов, как классических, так и основанных на машинном обучении:
	Алгоритм определения пересечения векторов:
Проверка пересечения двух векторов на основе уравнений прямых и условий пересечения. Например, используя векторное произведение и параметрические уравнения. Этот метод является основой для более сложных алгоритмов и применяется как базовая операция.
	Алгоритм сканирующего луча (Sweep Line Algorithm) [1]:
Этот алгоритм проходит через набор векторов, фиксируя точки пересечения и обрабатывая их в порядке возрастания координат. Он эффективен для множества векторов и позволяет найти все пересечения за О(n*log(n)) времени/
	Метод разделения пространства (Space Partitioning) [2]:
Пространственные структуры, такие как деревья квадрантов (Quadtree) или деревья k-d (k-d tree), могут использоваться для разделения пространства и эффективного поиска пересечений.
	Исходные данные
Исходными данные могут быть в разной форме. Это могут быть электро-схемы со специальными форматами, “.svg” изображения, форматы хранящие 3D объекты. Однако, в целях упрощения исследований, мы создадим свой набор данных, состоящий из различных 2D фигур.
Каждая фигура будет состоять из набора векторов, вектор, в свою очередь, состоит из 4 чисел – координат начальной точки и конечной. Сами числа будем генерировать при помощи функции numpy.random.rand(), которая возвращает случайное число в диапазоне [0, 1) из равномерного распределения. В этом можно убедиться, посмотрев на Рисунок 1.
 
Рисунок 1. Гистограмма распределения случайных чисел в диапазоне [0, 1)
При помощи таких векторов можно генерировать любые фигуры – отрезки, прямоугольники, треугольники, ломанные и другое. Хотя в реальных задачах координаты фигур не ограничены, их всегда можно привести к диапазону [0, 1), путем сжатия. При этой трансформации не появится новых пересечений и старые не пропадут. Код генерации различных фигур, применяющихся в данной работе представлен в Приложении 1.
Данные для обучения будут представлять наборы фигур и метку – есть ли хоть одно пересечение или нет. Класс реализующий хранение и генерацию объектов представлен в Приложении 2. На вход этот класс принимает функцию, которая выдает один пример. Также он принимает количество примеров и коэффициент количества пересекающихся примеров.
Реализовав алгоритм определения пересечения двух векторов, можно легко, но не эффективно, проверять пересечение фигур – сравнивать попарно все стороны фигур. Если хоть одна пара пересекается, то и объекты тоже. Реализацию алгоритма представлена в Приложении 3. На вход алгоритм принимает два массива, каждый из четырех чисел. На выходе он выдает значения истина или ложь, если вектора пересекаются или не пересекаются, соответственно.
 Для загрузки данных в модель при обучении и тестировании будем использовать Dataloader – специальный инструмент PyTorch, позволяющий доставать данные пакетами, размером в batch_size. Это позволяет не только более эффективно управлять данными, но и обучать модель одновременно на нескольких примерах. Однако в основном этот параметр влияет на скорость обучения. Поэтому batch_size будет равен 128.
Для задачи определения пересечения между парами векторов будем генерировать 100000 примеров. Для второй задачи 10000. Меньшее количество примеров обуславливается скоростью обучения, данные получаются достаточно большими и проводить эксперименты становится затруднительно
